name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Test stage
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        go-version: [1.23]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Install dependencies
        run: go mod tidy && go mod download

      # Linux-specific tests
      - name: Run Unit Tests with Race Detection on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Running tests on Linux"
          go test -v -race ./... -coverprofile=coverage.out | tee test_output.txt
        shell: bash

      # Windows-specific tests
      - name: Run Unit Tests on Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "Running tests on Windows"
          echo "This is a test running on Windows!" | Tee-Object -FilePath windows_test_output.txt
        shell: pwsh

      # Upload test results and coverage report for Windows
      - name: Upload Test Results for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-test-results
          path: windows_test_output.txt

      # Upload test results and coverage report for Linux
      - name: Upload Test Results for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-linux
          path: test_output.txt

      - name: Upload Coverage Report
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-linux
          path: coverage.out

  # Build stage
  build:
    needs: test  # Runs only if test job passes
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Install dependencies
        run: go mod tidy && go mod download

      # Build for Linux
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} go build -o kasmlink-linux-${{ matrix.arch }} .
        shell: bash

      # Build for Windows
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $GOOS="windows"; $GOARCH="${{ matrix.arch }}"; go build -o kasmlink-${{ matrix.arch }}.exe .
        shell: pwsh

      # Upload Linux build artifact
      - name: Upload Linux Build
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kasmlink-linux-${{ matrix.arch }}
          path: kasmlink-linux-${{ matrix.arch }}

      # Upload Windows build artifact
      - name: Upload Windows Build
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kasmlink-windows-${{ matrix.arch }}
          path: kasmlink-${{ matrix.arch }}.exe
