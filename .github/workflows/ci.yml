name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # This job tests the PR before allowing a merge
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        go-version: [1.23]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Install dependencies
        run: go mod tidy && go mod download

      - name: Run Unit Tests with Race Detection
        run: |
          go test -v -race ./... -coverprofile=coverage.out | tee test_output.txt

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: test_output.txt

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: coverage.out

  build:
    needs: test # Ensure build runs only after tests pass
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [amd64, arm64]  # Add multiple architectures

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Install dependencies
        run: go mod tidy && go mod download

      # Build for Linux
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} go build -o kasmlink-linux-${{ matrix.arch }} .
        shell: bash  # Use bash shell for Linux

      # Build for Windows
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          if ($Env:RUNNER_OS -eq 'Windows') {
            $GOOS="windows"; $GOARCH="${{ matrix.arch }}"; go build -o kasmlink-${{ matrix.arch }}.exe .
          }
        shell: pwsh  # Use PowerShell for Windows

      - name: Upload Linux Build
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kasmlink-linux-${{ matrix.arch }}
          path: kasmlink-linux-${{ matrix.arch }}

      - name: Upload Windows Build
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kasmlink-windows-${{ matrix.arch }}
          path: kasmlink-${{ matrix.arch }}.exe
